import cv2
import mediapipe as mp
import numpy as np
import openai
import json
import os
import uvicorn
from dotenv import load_dotenv
from fastapi import FastAPI, UploadFile, File, Form, HTTPException
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from PIL import Image
import io
from typing import Optional

# ========================== C·∫§U H√åNH OPENAI API ==========================
# üõ† ƒê·∫£m b·∫£o API key ƒë√£ ƒë∆∞·ª£c load
load_dotenv()  # Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("üö® L·ªói: OPENAI_API_KEY kh√¥ng t·ªìn t·∫°i. Ki·ªÉm tra l·∫°i file .env")

client = openai.OpenAI(api_key=api_key)

# ========================== KH·ªûI T·∫†O FASTAPI ==========================
app = FastAPI()

# ========================== KH·ªûI T·∫†O MEDIA PIPE POSE ==========================
mp_pose = mp.solutions.pose
pose = mp_pose.Pose()

# ========================== H√ÄM TR√çCH XU·∫§T KEYPOINTS ==========================
def extract_keypoints(image):
    """Tr√≠ch xu·∫•t t·ªça ƒë·ªô c√°c kh·ªõp c∆° th·ªÉ t·ª´ ·∫£nh b·∫±ng MediaPipe Pose"""
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    results = pose.process(image_rgb)

    keypoints = {}
    if results.pose_landmarks:
        for idx, landmark in enumerate(results.pose_landmarks.landmark):
            keypoints[idx] = {"x": landmark.x, "y": landmark.y}
    return keypoints

def calculate_measurements(keypoints):
    """T√≠nh to√°n s·ªë ƒëo c∆° th·ªÉ t·ª´ keypoints"""
    measurements = {}
    if keypoints:
        left_shoulder = keypoints.get(11, {"x": 0, "y": 0})
        right_shoulder = keypoints.get(12, {"x": 0, "y": 0})
        measurements["shoulder_width"] = abs(right_shoulder["x"] - left_shoulder["x"])

        left_waist = keypoints.get(23, {"x": 0, "y": 0})
        right_waist = keypoints.get(24, {"x": 0, "y": 0})
        measurements["waist_width"] = abs(right_waist["x"] - left_waist["x"])

        left_hip = keypoints.get(25, {"x": 0, "y": 0})
        right_hip = keypoints.get(26, {"x": 0, "y": 0})
        measurements["hip_width"] = abs(right_hip["x"] - left_hip["x"])

    return measurements

# ========================== H√ÄM X·ª¨ L√ù TEXT & ·∫¢NH ==========================
@app.post("/process_input")
async def process_input(
    file: UploadFile = File(None),
    message: str = Form(None),
    userPreferences: str = Form(None)
):
    """Nh·∫≠n input t·ª´ ng∆∞·ªùi d√πng (text ho·∫∑c ·∫£nh ho·∫∑c c·∫£ hai)"""
    try:
        user_data = json.loads(userPreferences) if userPreferences else {}

        keypoints = None
        measurements_json = "{}"

        if file:
            contents = await file.read()
            image = np.array(Image.open(io.BytesIO(contents)))
            keypoints = extract_keypoints(image)

            if keypoints:
                measurements = calculate_measurements(keypoints)
                measurements_json = json.dumps(measurements)
            else:
                return JSONResponse(content={"error": "Kh√¥ng th·ªÉ nh·∫≠n di·ªán d√°ng ng∆∞·ªùi t·ª´ ·∫£nh."}, status_code=400)

        # üìù T·∫°o prompt AI
        prompt = f"""
        Ng∆∞·ªùi d√πng ƒëang t√¨m ki·∫øm t∆∞ v·∫•n th·ªùi trang.
        
        - Tin nh·∫Øn: "{message if message else 'Kh√¥ng c√≥'}"
        - Th√¥ng tin t·ª´ ·∫£nh: {measurements_json}
        - Th√¥ng tin ng∆∞·ªùi d√πng:
            + Chi·ªÅu cao: {user_data.get("height", "Kh√¥ng c√≥")}
            + C√¢n n·∫∑ng: {user_data.get("weight", "Kh√¥ng c√≥")}

        H√£y ƒë∆∞a ra l·ªùi khuy√™n v·ªÅ phong c√°ch th·ªùi trang ph√π h·ª£p d·ª±a tr√™n th√¥ng tin tr√™n.
        """

        # ‚úÖ G·ªçi OpenAI API v·ªõi c√∫ ph√°p m·ªõi
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=250
        )

        reply = response.choices[0].message.content
        return JSONResponse(content={"reply": reply, "keypoints": keypoints})

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"L·ªói khi g·ªçi OpenAI: {str(e)}")
# ========================== CH·∫†Y SERVER ==========================
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000, reload=True)
